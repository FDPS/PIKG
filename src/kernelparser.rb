#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.16
# from Racc grammar file "".
#

require 'racc/parser.rb'

$lines = []
$used_q = []
def get_lineno(token)
  nline = 0
  $used_q.each{ |t|
    nline += 1 if t[0] == :EOL
    break if t[1] == token
  }
  $lines[nline][0]
end

def get_line(token)
  nline = 0
  $used_q.each{ |t|
    nline += 1 if t[0] == :EOL
    break if t[1] == token
  }
  $lines[nline][1]
end

class KernelParser < Racc::Parser

module_eval(<<'...end kernelparser.y/module_eval...', 'kernelparser.y', 154)
def vartype(string)
[[:F64VEC,:F64,:F32VEC,:F32,:F16VEC,:F16,:S64,:U64,:S32,:U32,:S16,:U16][["F64vec","F64","F32vec","F32","F16vec","F16","S64","U64","S32","U32","S16","U16"].index(string)],string]
end
def iotype(string)
[[:EPI,:EPJ,:FORCE,:MEMBER,:ACCUM,:TABLE][["EPI","EPJ","FORCE","MEMBER","ACCUM","TABLE"].index(string)], string]
end
def dim(string)
  [[:x,:y,:z,:xx,:yy,:zz,:xy,:xz,:yz,:yx,:zx,:zy][["x","y","z","xx","yy","zz","xy","xz","yz","yx","zx","zy"].index(string)],string]
end

def parse(filename)
  @q=[]
  open(filename){ |f|
    count = 0
    f.each_line{|str|
      a=str.chomp.split(/(\/\/|\s|:|\=\=|\!\=|\+\=|-\=|\*\=|\&\&|\|\||\&|\||\+|-|\*|\/|\=|\(|\)|,|\.|>\=|<\=|>|<|\[|\]|;|~|\^)/).select{|s| s=~/\S+/}
      symbols = /^(\=\=|\!\=|\&\&|\|\||\&|\||\+|-|\*|\/|\(|\)|,|\.|>\=|<\=|>|<|\[|\]|\{|\})$/
      if a == [] || a[0] == "//"
        next
      end
      count += 1
      $lines.push([count,str])
      if a[0] =~ /(EPI|EPJ|FORCE|MEMBER|ACCUM|TABLE)/ && a[1] != '.'
        io = a[0]
        @q << iotype(a.shift) # iotype
      end
      if a[0] == "static"
        @q << ["static",a.shift]
      elsif a[0] == "local"
        @q << ["local",a.shift]
      end

      if a[0] =~ /(F(64|32|16)|F(64|32|16)vec|(U|S)(64|32|16))/
        @q << vartype(a.shift) # type
        @q << [:IDENT, a.shift] # varname
        if io != nil && a[0] == ":"
          @q << [":",a.shift] # :
          @q << [:IDENT, a.shift] # fdpsname
        end
      elsif a[0] == "function"
        #      print "function decl"
        @q << ["function", a.shift]
        @q << [:IDENT, a.shift]
        @q << ["(", a.shift]
        a.each{|x|
          if x =~ /(F(64|32|16)|F(64|32|16)vec|(U|S)(64|32|16))/
            @q << vartype(x)
          elsif x  == ','
            @q << [',', x]
          elsif x  == ')'
            @q << [')', x]
	  elsif x == "//"
	       break
          else
            @q << [:IDENT, x]
          end
        }
      elsif a[0] == "return"
        @q << ["return", a.shift]
        a.each{ |x|
          if x =~ symbols
            @q << [x, x]
	  elsif x =~ /^\d+(f|h|s|l|u|us|ul)?$/
            @q << [:DEC, x]
	  elsif x == "//"
		break
          else
            @q << [:IDENT, x]
          end
        }
      elsif a[0] == "end"
        @q << ["end", a.shift]
      elsif a[0] == "#pragma"
        #p a
        @q << ["#pragma",a.shift]
        a.each{|x|
	  if x == "//"
	       break
	  else
	    @q << [:TEXT,x]
          end
	       
        }
      elsif a[0] == "if"
        @q << ["if","if"]
        a.shift
        a.each{|x|
	  if x =~ symbols
	    @q << [x,x]
	  elsif x =~ /^\d+(f|h|s|l|u|us|ul)?$/
            @q << [:DEC, x]
	  elsif x == "//"
	    break
          else
            @q << [:IDENT, x]
	  end
        }
      elsif a[0] == "elsif"
        @q << ["elsif","elsif"]
        a.shift
        a.each{|x|
	  if x =~ symbols
	    @q << [x,x]
	  elsif x =~ /^\d+(f|h|s|l|u|us|ul)?$/
	    @q << [:DEC, x]
	  elsif x == "//"
	    break
	  else
            @q << [:IDENT, x]
	  end
        }
      elsif a[0] == "else"
        @q << ["else","else"]
      elsif a[0] == "endif"
        @q << ["endif","endif"]
      elsif a[1] =~ /(\=|\+\=|-\=)/
        #print "statement \n"
        @q << [:IDENT,a.shift]
        #p a
        @q << [a[0], a[0]]
        a.shift
        a.each{|x|
          if x =~ symbols
            @q << [x,x]
	  elsif x =~/^\d+(f|h|s|l|u|us|ul)?$/
            @q << [:DEC,x]
          elsif x == "//"
	    break   
          else
            @q << [:IDENT,x]
          end
	}
      elsif a[3] =~ /(\=|\+\=|-\=)/
        #print "statement \n"
        @q << [:IDENT,a.shift] # var
        @q << [a[0], a[0]]    #.
        a.shift
        @q << [:IDENT,a.shift]
        @q << [a[0], a[0]]    # =|+=|-=|*=|/=
        a.shift
        a.each{|x|
          if x =~ symbols
            @q << [x,x]
	  elsif x =~/^\d+(f|h|s|l|u|us|ul)?$/
            @q << [:DEC,x]
	  elsif x == "break"
	    break
          else
            @q << [:IDENT,x]
          end
        }
      else
        warn "error: unsupported DSL description"
        warn "  line #{f.lineno}: #{str}"
        abort
      end
      @q << [:EOL,:EOL]
    }
    @q << nil
    do_parse
  }
end

def next_token
  tmp = @q.shift
  $used_q << tmp
  tmp
end


def on_error(id,val,stack)
  #lineno = get_lineno(val)
  #line   = get_line(val)
  line0 = []
  $used_q.reverse_each{ |v|
    break if v[1] == :EOL
    line0.push(v[1])
  }
  line0 = "parse error: " + line0.reverse.join('')

  line1 = []
  @q.each{ |v|
    break if v[1] == :EOL
    line1.push(v[1])
  }
  line1 = line1.join('')

  #warning = "parse error :line #{lineno}: #{line}"
  warning = line0 + line1 + "\n"
  for i in 1..line0.length
    warning += " "
  end
  warning += "^"
  abort warning
end
...end kernelparser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   109,    51,    57,   173,    57,    89,    90,    87,    88,   164,
   165,    57,    33,    57,   103,    57,   162,    57,    44,    57,
    52,    57,    60,    55,    60,    55,    57,    62,    57,    64,
    57,    60,    55,    60,    55,    60,    55,    60,    55,    60,
    55,    60,    55,   161,    66,    65,    60,    55,    60,    55,
    60,    55,    89,    90,    66,    61,    57,    61,   150,   104,
   105,   106,   107,   108,    61,    57,    61,    57,    61,    57,
    61,    57,    61,    57,    61,    57,    60,    55,    57,    61,
    57,    61,    57,    61,    67,    60,    55,    60,    55,    60,
    55,    60,    55,    60,    55,    60,    55,    39,    60,    55,
    60,    55,    60,    55,    73,    80,    89,    90,    44,    61,
   166,   167,    77,    51,   163,   162,    57,    85,    61,    57,
    61,    57,    61,    57,    61,    57,    61,    57,    61,    47,
    48,    61,    86,    61,    51,    61,    60,    55,   110,    60,
    55,    60,    55,    60,    55,    60,    55,    60,    55,    89,
    90,    87,    88,    98,    97,   100,    99,   113,    46,    49,
    50,    72,    32,    72,    32,    89,    90,    87,    88,    61,
   117,   119,    61,   120,    61,    44,    61,    44,    61,   123,
    61,    89,    90,    87,    88,   124,   128,    27,    28,    29,
    30,    31,    39,    32,   129,   130,   131,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,   148,   113,   117,    27,    28,    29,    30,
    31,    32,   152,   153,    44,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    32,   158,   159,    27,    28,    29,    30,    31,    32,
    89,    90,    87,    88,    98,    97,   100,    99,    93,    94,
    91,    92,    95,    96,    27,    28,    29,    30,    31,   160,
   168,   158,    27,    28,    29,    30,    31,    89,    90,    87,
    88,    98,    97,   100,    99,    93,    94,    91,    92,    95,
    96,    41,    42,    89,    90,    87,    88,    98,    97,   100,
    99,   171,   146,    44,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    89,    90,    87,    88,
    98,    97,   100,    99,    93,    94,    91,    92,    95,    96,
    89,    90,    87,    88,    98,    97,   100,    99,    93,    94,
    91,    92,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    89,    90,    87,    88,
    98,    97,   100,    99,    93,    94,    91,    92,    89,    90,
    87,    88,    98,    97,   100,    99,    93,    94,    89,    90,
    87,    88,    98,    97,   100,    99,    93,    94,    89,    90,
    87,    88 ]

racc_action_check = [
    61,   114,    72,   169,    96,   143,   143,   143,   143,   148,
   148,    97,     1,    98,    60,    99,   126,   100,     7,    91,
    26,   103,    72,    72,    96,    96,    55,    28,    57,    30,
    93,    97,    97,    98,    98,    99,    99,   100,   100,    91,
    91,   103,   103,   126,    60,    31,    55,    55,    57,    57,
    93,    93,   133,   133,    32,    72,    46,    96,   114,    61,
    61,    61,    61,    61,    97,   162,    98,    49,    99,    48,
   100,    47,    91,    92,   103,    29,    46,    46,    94,    55,
    90,    57,    95,    93,    33,   162,   162,    49,    49,    48,
    48,    47,    47,    92,    92,    29,    29,    37,    94,    94,
    90,    90,    95,    95,    39,    46,   132,   132,    40,    46,
   154,   154,    43,    25,   147,   147,    89,    51,   162,    88,
    49,    87,    48,    27,    47,    50,    92,    80,    29,    25,
    25,    94,    53,    90,    58,    95,    89,    89,    63,    88,
    88,    87,    87,    27,    27,    50,    50,    80,    80,   138,
   138,   138,   138,   138,   138,   138,   138,    65,    25,    25,
    25,    38,    66,    70,    38,   144,   144,   144,   144,    89,
    71,    73,    88,    74,    87,    75,    27,    76,    50,    78,
    80,   145,   145,   145,   145,    79,    81,    38,    38,    38,
    38,    38,     2,     2,    82,    83,    84,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,   109,   111,   115,     2,     2,     2,     2,
     2,     0,   117,   118,   119,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    34,   120,   121,     0,     0,     0,     0,     0,    24,
    54,    54,    54,    54,    54,    54,    54,    54,    54,    54,
    54,    54,    54,    54,    34,    34,    34,    34,    34,   122,
   157,   159,    24,    24,    24,    24,    24,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,     5,     5,   139,   139,   139,   139,   139,   139,   139,
   139,   166,   101,   167,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,   125,   125,   125,   125,
   125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
   140,   140,   140,   140,   140,   140,   140,   140,   140,   140,
   140,   140,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    41,    41,    41,    42,    42,    42,    42,    42,    42,
    42,    42,    42,    42,    42,    42,   141,   141,   141,   141,
   141,   141,   141,   141,   141,   141,   141,   141,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   136,   137,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   142,   142,
   142,   142 ]

racc_action_pointer = [
   194,    12,   166,   nil,   nil,   269,   nil,    -9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   222,   111,    -1,   116,     6,    68,
     8,   -10,    -4,    84,   214,   nil,   nil,    71,   137,    77,
    81,   307,   319,    91,   nil,   nil,    49,    64,    62,    60,
   118,    90,   nil,   111,   246,    19,   nil,    21,   132,   nil,
   -14,    -2,   nil,   117,   nil,   102,   135,   nil,   nil,   nil,
   139,   145,    -5,   143,   153,   148,   150,   nil,   158,   164,
   120,   165,   173,   174,   175,   nil,   nil,   114,   112,   109,
    73,    12,    66,    23,    71,    75,    -3,     4,     6,     8,
    10,   273,   nil,    14,   nil,   nil,   nil,   nil,   nil,   153,
   nil,   159,   nil,   nil,    -1,   190,   nil,   201,   202,   197,
   215,   223,   248,   nil,   nil,   312,   -14,   nil,   nil,   nil,
   nil,   nil,   102,    48,   nil,   nil,   374,   384,   145,   289,
   326,   362,   394,     1,   161,   177,   nil,    85,   -57,   nil,
   nil,   nil,   nil,   nil,    81,   nil,   nil,   249,   nil,   244,
   nil,   nil,    58,   nil,   nil,   nil,   280,   276,   nil,   -18,
   nil,   nil,   nil,   nil ]

racc_action_default = [
   -94,   -94,   -94,    -3,    -4,   -94,    -9,   -94,   -21,   -22,
   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,   -32,
   -33,   -34,   -35,   -36,   -39,   -94,   -94,   -94,   -94,   -94,
   -94,   -94,   -82,   -94,   -94,    -2,    -5,   -10,   -94,   -94,
   -94,   -94,   -94,   -94,   -37,   -40,   -94,   -94,   -94,   -94,
   -94,   -94,   -47,   -94,   -57,   -94,   -73,   -94,   -75,   -76,
   -82,   -85,   -49,   -94,   -51,   -52,   -94,   174,    -1,   -11,
   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -20,   -94,   -94,
   -94,   -94,   -94,   -94,   -94,   -83,   -48,   -94,   -94,   -94,
   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,
   -94,   -94,   -74,   -94,   -86,   -87,   -88,   -89,   -90,   -94,
   -50,   -53,   -54,   -56,   -94,   -94,   -13,   -94,   -94,   -94,
   -94,   -94,   -94,   -41,   -42,   -81,   -94,   -79,   -43,   -44,
   -45,   -46,   -58,   -59,   -60,   -61,   -62,   -63,   -64,   -65,
   -66,   -67,   -68,   -69,   -70,   -71,   -72,   -94,   -91,   -55,
   -84,   -12,   -15,   -14,   -94,   -17,   -19,   -94,   -38,   -94,
    -8,   -77,   -94,   -78,   -92,   -93,   -94,   -94,    -6,   -94,
   -80,   -16,   -18,    -7 ]

racc_goto_table = [
   101,   155,   102,   116,   126,   112,     4,   170,    36,     2,
   154,    79,   111,    43,   157,     1,   nil,   nil,   nil,   nil,
   nil,    34,    40,   nil,   nil,   125,    25,   147,    25,    71,
   nil,   nil,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,    74,   151,   125,   172,
    25,   149,    53,   169,    63,     3,    69,    35,    75,    76,
    25,   115,   nil,   nil,    25,   nil,   nil,   nil,   nil,   nil,
   nil,    78,    81,    82,    83,    84,   nil,   nil,   nil,    45,
   nil,   121,   122,   nil,   nil,   nil,   nil,   nil,   nil,    68,
   nil,   nil,   114,    70,   nil,   nil,   nil,   118,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   125 ]

racc_goto_check = [
    24,    17,    24,    14,    27,    23,     5,    28,     5,     2,
    16,    20,    22,     8,     9,     1,   nil,   nil,   nil,   nil,
   nil,     3,     7,   nil,   nil,    24,    19,    27,    19,    13,
   nil,   nil,    24,    24,    24,    24,    24,    24,    24,    24,
    24,    24,    24,    24,    24,    24,     8,    14,    24,    17,
    19,    23,    15,     9,    15,     4,     3,     4,     7,     7,
    19,    13,   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,
   nil,    15,    15,    15,    15,    15,   nil,   nil,   nil,     4,
   nil,     8,     8,   nil,   nil,   nil,   nil,   nil,   nil,     4,
   nil,   nil,    19,     4,   nil,   nil,   nil,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24 ]

racc_goto_pointer = [
   nil,    15,     9,    19,    55,     6,   nil,    17,     6,  -106,
   nil,   nil,   nil,    -9,   -68,    25,  -109,  -118,   nil,    26,
   -35,   nil,   -53,   -60,   -55,   nil,   nil,   -76,  -155 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,     5,     7,   156,   nil,
     6,    37,    38,   nil,   nil,   nil,   nil,   nil,    24,    58,
   nil,    26,   nil,   nil,    54,    56,    59,   nil,   127 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 69, :_reduce_1,
  2, 69, :_reduce_2,
  1, 69, :_reduce_3,
  1, 70, :_reduce_none,
  2, 70, :_reduce_5,
  6, 73, :_reduce_6,
  7, 73, :_reduce_7,
  5, 73, :_reduce_8,
  1, 73, :_reduce_none,
  1, 71, :_reduce_none,
  2, 71, :_reduce_11,
  4, 79, :_reduce_12,
  3, 79, :_reduce_13,
  3, 81, :_reduce_14,
  2, 82, :_reduce_none,
  6, 80, :_reduce_16,
  1, 84, :_reduce_none,
  3, 84, :_reduce_18,
  1, 85, :_reduce_19,
  3, 78, :_reduce_20,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 75, :_reduce_none,
  1, 76, :_reduce_none,
  1, 77, :_reduce_none,
  1, 72, :_reduce_none,
  2, 72, :_reduce_40,
  4, 86, :_reduce_41,
  4, 86, :_reduce_42,
  4, 86, :_reduce_43,
  4, 86, :_reduce_44,
  4, 86, :_reduce_45,
  4, 86, :_reduce_46,
  2, 86, :_reduce_47,
  3, 86, :_reduce_48,
  2, 86, :_reduce_49,
  3, 86, :_reduce_50,
  2, 86, :_reduce_51,
  2, 89, :_reduce_52,
  3, 89, :_reduce_53,
  1, 90, :_reduce_54,
  2, 90, :_reduce_55,
  1, 91, :_reduce_56,
  1, 83, :_reduce_none,
  3, 92, :_reduce_58,
  3, 92, :_reduce_59,
  3, 92, :_reduce_60,
  3, 92, :_reduce_61,
  3, 92, :_reduce_62,
  3, 92, :_reduce_63,
  3, 92, :_reduce_64,
  3, 92, :_reduce_65,
  3, 92, :_reduce_66,
  3, 92, :_reduce_67,
  3, 92, :_reduce_68,
  3, 92, :_reduce_69,
  3, 92, :_reduce_70,
  3, 92, :_reduce_71,
  3, 92, :_reduce_72,
  1, 92, :_reduce_73,
  2, 92, :_reduce_74,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  3, 88, :_reduce_77,
  4, 93, :_reduce_78,
  1, 95, :_reduce_none,
  3, 95, :_reduce_80,
  1, 96, :_reduce_81,
  1, 87, :_reduce_82,
  3, 87, :_reduce_83,
  4, 87, :_reduce_84,
  1, 94, :_reduce_85,
  2, 94, :_reduce_86,
  2, 94, :_reduce_87,
  2, 94, :_reduce_88,
  2, 94, :_reduce_89,
  2, 94, :_reduce_90,
  3, 94, :_reduce_91,
  4, 94, :_reduce_92,
  4, 94, :_reduce_93 ]

racc_reduce_n = 94

racc_shift_n = 174

racc_token_table = {
  false => 0,
  :error => 1,
  "." => 2,
  :UMINUS => 3,
  "*" => 4,
  "/" => 5,
  "+" => 6,
  "-" => 7,
  "<" => 8,
  ">" => 9,
  "<=" => 10,
  ">=" => 11,
  "&" => 12,
  "|" => 13,
  "==" => 14,
  "!=" => 15,
  "&&" => 16,
  "||" => 17,
  "+=" => 18,
  "-=" => 19,
  ":" => 20,
  :EOL => 21,
  "static" => 22,
  "local" => 23,
  "return" => 24,
  "end" => 25,
  "function" => 26,
  :IDENT => 27,
  "(" => 28,
  ")" => 29,
  "," => 30,
  :EPI => 31,
  :EPJ => 32,
  :FORCE => 33,
  :TABLE => 34,
  :F64VEC => 35,
  :F64 => 36,
  :F32VEC => 37,
  :F32 => 38,
  :F16VEC => 39,
  :F16 => 40,
  :S64 => 41,
  :U64 => 42,
  :S32 => 43,
  :U32 => 44,
  :S16 => 45,
  :U16 => 46,
  "=" => 47,
  "*=" => 48,
  "/=" => 49,
  "if" => 50,
  "else" => 51,
  "elsif" => 52,
  "endif" => 53,
  "#pragma" => 54,
  :TEXT => 55,
  "{" => 56,
  "}" => 57,
  "[" => 58,
  "]" => 59,
  :DEC => 60,
  "l" => 61,
  "s" => 62,
  "u" => 63,
  "ul" => 64,
  "us" => 65,
  "f" => 66,
  "h" => 67 }

racc_nt_base = 68

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\".\"",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"&\"",
  "\"|\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"+=\"",
  "\"-=\"",
  "\":\"",
  "EOL",
  "\"static\"",
  "\"local\"",
  "\"return\"",
  "\"end\"",
  "\"function\"",
  "IDENT",
  "\"(\"",
  "\")\"",
  "\",\"",
  "EPI",
  "EPJ",
  "FORCE",
  "TABLE",
  "F64VEC",
  "F64",
  "F32VEC",
  "F32",
  "F16VEC",
  "F16",
  "S64",
  "U64",
  "S32",
  "U32",
  "S16",
  "U16",
  "\"=\"",
  "\"*=\"",
  "\"/=\"",
  "\"if\"",
  "\"else\"",
  "\"elsif\"",
  "\"endif\"",
  "\"#pragma\"",
  "TEXT",
  "\"{\"",
  "\"}\"",
  "\"[\"",
  "\"]\"",
  "DEC",
  "\"l\"",
  "\"s\"",
  "\"u\"",
  "\"ul\"",
  "\"us\"",
  "\"f\"",
  "\"h\"",
  "$start",
  "innerkernel",
  "iodeclarations",
  "functions",
  "statements",
  "iodeclaration",
  "iotype",
  "type",
  "varname",
  "fdpsname",
  "declaration",
  "function",
  "funcdeclaration",
  "ret_state",
  "end_state",
  "expression",
  "operands",
  "operand",
  "statement",
  "var",
  "table",
  "pragma",
  "options",
  "option",
  "binary",
  "funccall",
  "number",
  "args",
  "arg" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'kernelparser.y', 18)
  def _reduce_1(val, _values, result)
    result=Kernelprogram.new(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 19)
  def _reduce_2(val, _values, result)
    result=Kernelprogram.new(val)
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 20)
  def _reduce_3(val, _values, result)
    result=Kernelprogram.new(val)
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'kernelparser.y', 22)
  def _reduce_5(val, _values, result)
    result = val[0]+val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 23)
  def _reduce_6(val, _values, result)
    result = [Iodeclaration.new([val[0],val[1],val[2],val[4],nil])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 24)
  def _reduce_7(val, _values, result)
    result = [Iodeclaration.new([val[0],val[2],val[3],val[5],"static"])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 25)
  def _reduce_8(val, _values, result)
     result = [Iodeclaration.new([val[0],val[2],val[3],nil,"local"])]
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'kernelparser.y', 29)
  def _reduce_11(val, _values, result)
    result = val[0]+val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 30)
  def _reduce_12(val, _values, result)
    result = [Function.new([val[0],val[1],val[2]])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 31)
  def _reduce_13(val, _values, result)
    result = [Function.new([val[0],[],val[1]])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 32)
  def _reduce_14(val, _values, result)
    result = ReturnState.new(val[1])
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'kernelparser.y', 34)
  def _reduce_16(val, _values, result)
    result = Funcdeclaration.new([val[1],val[3]])
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'kernelparser.y', 37)
  def _reduce_18(val, _values, result)
    result = val[0] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 38)
  def _reduce_19(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 40)
  def _reduce_20(val, _values, result)
    result = [Iodeclaration.new(["MEMBER",val[0],val[1],nil,nil])]
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

module_eval(<<'.,.,', 'kernelparser.y', 65)
  def _reduce_40(val, _values, result)
    result = val[0]+val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 67)
  def _reduce_41(val, _values, result)
    result = [Statement.new([val[0],val[2]])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 68)
  def _reduce_42(val, _values, result)
    result = [TableDecl.new([val[0],val[2]])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 69)
  def _reduce_43(val, _values, result)
    result = [Statement.new([val[0],val[2],nil,:plus])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 70)
  def _reduce_44(val, _values, result)
    result = [Statement.new([val[0],val[2],nil,:minus])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 71)
  def _reduce_45(val, _values, result)
    result = [Statement.new([val[0],val[2],nil,:mult])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 72)
  def _reduce_46(val, _values, result)
    result = [Statement.new([val[0],val[2],nil,:div])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 73)
  def _reduce_47(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 74)
  def _reduce_48(val, _values, result)
    result = [IfElseState.new([:if,val[1]])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 75)
  def _reduce_49(val, _values, result)
    result = [IfElseState.new([:else,nil])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 76)
  def _reduce_50(val, _values, result)
    result = [IfElseState.new([:elsif,val[1]])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 77)
  def _reduce_51(val, _values, result)
    result = [IfElseState.new([:endif,nil])]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 78)
  def _reduce_52(val, _values, result)
    result = Pragma.new([val[1],nil])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 79)
  def _reduce_53(val, _values, result)
    result = Pragma.new([val[1],val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 80)
  def _reduce_54(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 81)
  def _reduce_55(val, _values, result)
     result = val[0] + val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 82)
  def _reduce_56(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

# reduce 57 omitted

module_eval(<<'.,.,', 'kernelparser.y', 86)
  def _reduce_58(val, _values, result)
    result = Expression.new([:plus,  val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 87)
  def _reduce_59(val, _values, result)
    result = Expression.new([:minus, val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 88)
  def _reduce_60(val, _values, result)
    result = Expression.new([:mult,  val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 89)
  def _reduce_61(val, _values, result)
    result = Expression.new([:div,   val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 90)
  def _reduce_62(val, _values, result)
    result = Expression.new([:eq,    val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 91)
  def _reduce_63(val, _values, result)
    result = Expression.new([:neq,   val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 92)
  def _reduce_64(val, _values, result)
    result = Expression.new([:and,   val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 93)
  def _reduce_65(val, _values, result)
    result = Expression.new([:or,    val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 94)
  def _reduce_66(val, _values, result)
    result = Expression.new([:land,   val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 95)
  def _reduce_67(val, _values, result)
    result = Expression.new([:lor,    val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 96)
  def _reduce_68(val, _values, result)
    result = Expression.new([:gt,    val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 97)
  def _reduce_69(val, _values, result)
    result = Expression.new([:lt,    val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 98)
  def _reduce_70(val, _values, result)
    result = Expression.new([:ge,    val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 99)
  def _reduce_71(val, _values, result)
    result = Expression.new([:le,    val[0], val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 100)
  def _reduce_72(val, _values, result)
    result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 101)
  def _reduce_73(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 102)
  def _reduce_74(val, _values, result)
    result = Expression.new([:uminus,val[1], nil])
    result
  end
.,.,

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'kernelparser.y', 106)
  def _reduce_77(val, _values, result)
    result = Table.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 108)
  def _reduce_78(val, _values, result)
    result = FuncCall.new([val[0], val[2]])
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'kernelparser.y', 110)
  def _reduce_80(val, _values, result)
    result = val[0] + val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 111)
  def _reduce_81(val, _values, result)
    result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 113)
  def _reduce_82(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 114)
  def _reduce_83(val, _values, result)
    result = Expression.new([:dot,val[0],val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 115)
  def _reduce_84(val, _values, result)
    result = Expression.new([:array,val[0],val[2]])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 117)
  def _reduce_85(val, _values, result)
    result = IntegerValue.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 118)
  def _reduce_86(val, _values, result)
    result = IntegerValue.new(val[0]+val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 119)
  def _reduce_87(val, _values, result)
    result = IntegerValue.new(val[0]+val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 120)
  def _reduce_88(val, _values, result)
    result = IntegerValue.new(val[0]+val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 121)
  def _reduce_89(val, _values, result)
    result = IntegerValue.new(val[0]+val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 122)
  def _reduce_90(val, _values, result)
    result = IntegerValue.new(val[0]+val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 123)
  def _reduce_91(val, _values, result)
    result = FloatingPoint.new(val[0]+val[1]+val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 124)
  def _reduce_92(val, _values, result)
    result = FloatingPoint.new(val[0]+val[1]+val[2]+val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'kernelparser.y', 125)
  def _reduce_93(val, _values, result)
    result = FloatingPoint.new(val[0]+val[1]+val[2]+val[3])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class KernelParser
